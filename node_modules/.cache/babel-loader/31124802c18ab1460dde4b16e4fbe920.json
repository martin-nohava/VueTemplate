{"remainingRequest":"/Users/martin_nohava/Documents/VueTemplate/node_modules/babel-loader/lib/index.js!/Users/martin_nohava/Documents/VueTemplate/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/Users/martin_nohava/Documents/VueTemplate/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/martin_nohava/Documents/VueTemplate/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/martin_nohava/Documents/VueTemplate/src/views/UserProfile.vue?vue&type=template&id=e928b7d8&scoped=true&bindings={\"state\":\"setup\",\"userID\":\"setup\",\"fullName\":\"options\",\"followUser\":\"options\",\"toggleFavourite\":\"options\",\"addPost\":\"options\"}","dependencies":[{"path":"/Users/martin_nohava/Documents/VueTemplate/src/views/UserProfile.vue","mtime":1602669797651},{"path":"/Users/martin_nohava/Documents/VueTemplate/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/martin_nohava/Documents/VueTemplate/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/martin_nohava/Documents/VueTemplate/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":499162500000},{"path":"/Users/martin_nohava/Documents/VueTemplate/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/martin_nohava/Documents/VueTemplate/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgdG9EaXNwbGF5U3RyaW5nIGFzIF90b0Rpc3BsYXlTdHJpbmcsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jaywgY3JlYXRlQ29tbWVudFZOb2RlIGFzIF9jcmVhdGVDb21tZW50Vk5vZGUsIGNyZWF0ZVRleHRWTm9kZSBhcyBfY3JlYXRlVGV4dFZOb2RlLCByZXNvbHZlQ29tcG9uZW50IGFzIF9yZXNvbHZlQ29tcG9uZW50LCByZW5kZXJMaXN0IGFzIF9yZW5kZXJMaXN0LCBGcmFnbWVudCBhcyBfRnJhZ21lbnQsIHdpdGhTY29wZUlkIGFzIF93aXRoU2NvcGVJZCwgcHVzaFNjb3BlSWQgYXMgX3B1c2hTY29wZUlkLCBwb3BTY29wZUlkIGFzIF9wb3BTY29wZUlkIH0gZnJvbSAidnVlIjsKCnZhciBfd2l0aElkID0gLyojX19QVVJFX18qL193aXRoU2NvcGVJZCgiZGF0YS12LWU5MjhiN2Q4Iik7CgpfcHVzaFNjb3BlSWQoImRhdGEtdi1lOTI4YjdkOCIpOwoKdmFyIF9ob2lzdGVkXzEgPSB7CiAgY2xhc3M6ICJ1c2VyLXByb2ZpbGUiCn07CnZhciBfaG9pc3RlZF8yID0gewogIGNsYXNzOiAidXNlci1wcm9maWxlX3NpZGViYXIiCn07CnZhciBfaG9pc3RlZF8zID0gewogIGNsYXNzOiAidXNlci1wcm9maWxlX3VzZXItcGFuZWwiCn07CnZhciBfaG9pc3RlZF80ID0gewogIGNsYXNzOiAidXNlci1wcm9maWxlX3VzZXJuYW1lIgp9Owp2YXIgX2hvaXN0ZWRfNSA9IHsKICBrZXk6IDAsCiAgY2xhc3M6ICJ1c2VyLXByb2ZpbGVfYWRtaW4tYmFkZ2UiCn07CnZhciBfaG9pc3RlZF82ID0gewogIGNsYXNzOiAidXNlci1wcm9maWxlX2ZvbGxvd2VyLWNvdW50Igp9OwoKdmFyIF9ob2lzdGVkXzcgPSAvKiNfX1BVUkVfXyovX2NyZWF0ZVZOb2RlKCJzdHJvbmciLCBudWxsLCAiRm9sbG93ZXJzOiAiLCAtMQovKiBIT0lTVEVEICovCik7Cgp2YXIgX2hvaXN0ZWRfOCA9IHsKICBjbGFzczogInVzZXItcHJvZmlsZV9wb3N0cy13cmFwcGVyIgp9OwoKX3BvcFNjb3BlSWQoKTsKCmV4cG9ydCB2YXIgcmVuZGVyID0gLyojX19QVVJFX18qL193aXRoSWQoZnVuY3Rpb24gcmVuZGVyKF9jdHgsIF9jYWNoZSwgJHByb3BzLCAkc2V0dXAsICRkYXRhLCAkb3B0aW9ucykgewogIHZhciBfY29tcG9uZW50X0NyZWF0ZVBvc3RQYW5lbCA9IF9yZXNvbHZlQ29tcG9uZW50KCJDcmVhdGVQb3N0UGFuZWwiKTsKCiAgdmFyIF9jb21wb25lbnRfUG9zdEl0ZW0gPSBfcmVzb2x2ZUNvbXBvbmVudCgiUG9zdEl0ZW0iKTsKCiAgcmV0dXJuIF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKCJkaXYiLCBfaG9pc3RlZF8xLCBbX2NyZWF0ZVZOb2RlKCJkaXYiLCBfaG9pc3RlZF8yLCBbX2NyZWF0ZVZOb2RlKCJkaXYiLCBfaG9pc3RlZF8zLCBbX2NyZWF0ZVZOb2RlKCJoMSIsIF9ob2lzdGVkXzQsIF90b0Rpc3BsYXlTdHJpbmcoJHNldHVwLnN0YXRlLnVzZXIudXNlcm5hbWUpLCAxCiAgLyogVEVYVCAqLwogICksIF9jcmVhdGVWTm9kZSgiaDMiLCBudWxsLCBfdG9EaXNwbGF5U3RyaW5nKCRzZXR1cC51c2VySUQpLCAxCiAgLyogVEVYVCAqLwogICksICRzZXR1cC5zdGF0ZS51c2VyLmlzQWRtaW4gPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soImRpdiIsIF9ob2lzdGVkXzUsICIgQWRtaW4gIikpIDogX2NyZWF0ZUNvbW1lbnRWTm9kZSgidi1pZiIsIHRydWUpLCBfY3JlYXRlVk5vZGUoImRpdiIsIF9ob2lzdGVkXzYsIFtfaG9pc3RlZF83LCBfY3JlYXRlVGV4dFZOb2RlKCIgIiArIF90b0Rpc3BsYXlTdHJpbmcoJHNldHVwLnN0YXRlLmZvbG93ZXJzKSwgMQogIC8qIFRFWFQgKi8KICApXSldKSwgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfQ3JlYXRlUG9zdFBhbmVsLCB7CiAgICAib25BZGQtcG9zdCI6ICRvcHRpb25zLmFkZFBvc3QKICB9LCBudWxsLCA4CiAgLyogUFJPUFMgKi8KICAsIFsib25BZGQtcG9zdCJdKV0pLCBfY3JlYXRlVk5vZGUoImRpdiIsIF9ob2lzdGVkXzgsIFsoX29wZW5CbG9jayh0cnVlKSwgX2NyZWF0ZUJsb2NrKF9GcmFnbWVudCwgbnVsbCwgX3JlbmRlckxpc3QoJHNldHVwLnN0YXRlLnVzZXIucG9zdHMsIGZ1bmN0aW9uIChwb3N0KSB7CiAgICByZXR1cm4gX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9Qb3N0SXRlbSwgewogICAgICBrZXk6IHBvc3QuaWQsCiAgICAgIHVzZXJuYW1lOiAkc2V0dXAuc3RhdGUudXNlci51c2VybmFtZSwKICAgICAgcG9zdDogcG9zdCwKICAgICAgb25GYXZvdXJpdGU6ICRvcHRpb25zLnRvZ2dsZUZhdm91cml0ZQogICAgfSwgbnVsbCwgOAogICAgLyogUFJPUFMgKi8KICAgICwgWyJ1c2VybmFtZSIsICJwb3N0IiwgIm9uRmF2b3VyaXRlIl0pOwogIH0pLCAxMjgKICAvKiBLRVlFRF9GUkFHTUVOVCAqLwogICkpXSldKTsKfSk7"},{"version":3,"sources":["/Users/martin_nohava/Documents/VueTemplate/src/views/UserProfile.vue"],"names":[],"mappings":";;;;;;;AACO,EAAA,KAAK,EAAC;;;AACJ,EAAA,KAAK,EAAC;;;AACF,EAAA,KAAK,EAAC;;;AACH,EAAA,KAAK,EAAC;;;;AAEL,EAAA,KAAK,EAAC;;;AAGN,EAAA,KAAK,EAAC;;;8BACP,YAAA,CAA4B,QAA5B,EAA4B,IAA5B,EAAQ,aAAR,EAAmB,CAAA;AAAA;AAAnB,C;;;AAKP,EAAA,KAAK,EAAC;;;;;;;;;;uBAdb,YAAA,CAuBM,KAvBN,EAAA,UAAA,EAuBM,CAtBJ,YAAA,CAYM,KAZN,EAAA,UAAA,EAYM,CAXF,YAAA,CASM,KATN,EAAA,UAAA,EASM,CARF,YAAA,CAA8D,IAA9D,EAAA,UAAA,EAA8D,gBAAA,CAA1B,MAAA,CAAA,KAAA,CAAM,IAAN,CAAW,QAAe,CAA9D,EAAuD;AAAA;AAAvD,GAQE,EAPF,YAAA,CAAmB,IAAnB,EAAmB,IAAnB,EAAmB,gBAAA,CAAb,MAAA,CAAA,MAAa,CAAnB,EAAY;AAAA;AAAZ,GAOE,EAN0C,MAAA,CAAA,KAAA,CAAM,IAAN,CAAW,O,kBAAvD,YAAA,CAEM,KAFN,EAAA,UAAA,EAAgE,SAAhE,C,qCAME,EAHF,YAAA,CAEM,KAFN,EAAA,UAAA,EAEM,CADF,UACE,E,iBAD0B,MAAC,gBAAA,CAAE,MAAA,CAAA,KAAA,CAAM,QAAR,C,EAAgB;AAAA;GAC3C,CAFN,CAGE,CATN,CAWE,EADF,YAAA,CAAsC,0BAAtC,EAAsC;AAApB,kBAAU,QAAA,CAAA;AAAU,GAAtC,EAAmC,IAAnC,EAAmC;AAAA;AAAnC,IAAmC,CAAA,YAAA,CAAnC,CACE,CAZN,CAsBI,EATJ,YAAA,CAQM,KARN,EAAA,UAAA,EAQM,E,kBAPH,YAAA,CAMW,SANX,EAMW,IANX,EAMW,WAAA,CALS,MAAA,CAAA,KAAA,CAAM,IAAN,CAAW,KAKpB,EALyB,UAAxB,IAAwB,EAApB;yBADhB,YAAA,CAMW,mBANX,EAMW;AAJC,MAAA,GAAG,EAAE,IAAI,CAAC,EAIX;AAHC,MAAA,QAAQ,EAAE,MAAA,CAAA,KAAA,CAAM,IAAN,CAAW,QAGtB;AAFC,MAAA,IAAI,EAAE,IAEP;AADL,MAAA,WAAS,EAAE,QAAA,CAAA;AACN,KANX,E,IAAA,E;;AAAA,M,mCAAA,C;GAMW,CANX,E;;AAAA,GAOG,EARN,CASI,CAvBN,C","sourcesContent":["<template>\n  <div class=\"user-profile\">\n    <div class=\"user-profile_sidebar\">\n        <div class=\"user-profile_user-panel\">\n            <h1 class=\"user-profile_username\">{{state.user.username}}</h1>\n            <h3>{{userID}}</h3>\n            <div class=\"user-profile_admin-badge\" v-if=\"state.user.isAdmin\">\n                Admin\n            </div>\n            <div class=\"user-profile_follower-count\">\n                <strong>Followers: </strong> {{state.folowers}}\n            </div>\n        </div>\n        <CreatePostPanel @add-post=\"addPost\"/>\n    </div>\n    <div class=\"user-profile_posts-wrapper\">\n       <PostItem \n            v-for=\"post in state.user.posts\" \n            v-bind:key=\"post.id\" \n            v-bind:username=\"state.user.username\" \n            v-bind:post=\"post\" \n            @favourite=\"toggleFavourite\">\n       </PostItem>\n    </div>\n  </div>\n</template>\n\n<script>\nimport PostItem from '../components/PostItem';\nimport CreatePostPanel from '../components/CreatePostPanel';\nimport {useRoute} from 'vue-router';\nimport {reactive, computed} from 'vue';\n\nexport default {\n  name: 'UserProfile',\n  components: {\n      PostItem,\n      CreatePostPanel\n  },\n  //Function for storing and returning data of our application\n  setup() {\n    const route = useRoute();\n    const userID = computed(() => route.params.userID)\n\n    const state = reactive({\n      folowers: 0,\n      //Temp user object\n      user: {\n        id: 1,\n        username: '@martin_nohava',\n        firstName: 'Martin',\n        lastName: 'Nohava',\n        email: 'martin@nohava.cz',\n        isAdmin: true,\n        posts: [\n            {\n                id: 1,\n                content: 'Hello World, my first post!'\n            },\n            {\n                id: 2,\n                content: 'Catch me if you can.'\n            }\n        ]\n      }\n    })\n    return {\n      state,\n      userID\n    }\n\n  },\n  //Watches a datapoint and when change is detected on that datapoint this method is executed\n  watch: {\n    folowers(newFollowerCount, oldFollowerCount) {\n      if (oldFollowerCount < newFollowerCount) {\n        //console.log(`${state.user.username} has gained a follower! Congrats!`);\n      }\n    }\n  },\n  //Object for computed data\n  computed: {\n    fullName() {\n      //${} is used for formating text insted of this.user.firstName + this.user.lastName\n      //return `${state.user.firstName} ${state.user.lastName}`;\n      return 0\n    }\n\n  },\n  methods: {\n    followUser() {\n      //state.folowers++;\n    },\n    toggleFavourite(id) {\n        console.log('Favorited post ' + id)\n    },\n    addPost(post) {\n        state.user.posts.unshift({id: state.user.posts.length + 1, content: post});\n    }\n  },\n  //Methot that runs when the component is loaded for the first time\n  mounted() {\n    this.followUser();\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.user-profile {\n    display: grid;\n    grid-template-columns: 1fr 3fr;\n    grid-gap: 50px;\n    padding: 50px 5%;\n\n    .user-profile_user-panel {\n        display: flex;\n        flex-direction: column;\n        padding: 20px;\n        background-color: white;\n        border-radius: 5px;\n        border: 1px solid whitesmoke;\n        margin-bottom: auto;\n\n        h1 {\n            margin: 0;\n        }\n\n        .user-profile_admin-badge {\n            background: navy;\n            color: white;\n            border-radius: 5px;\n            margin-right: auto;\n            padding: 0 10px;\n            font-weight: bold;\n        }\n\n        .user-profile_create-post {\n            display: flex;\n            flex-direction: column;\n            border-top: 1px solid whitesmoke;\n            margin-top: 20px;\n\n            &.exceeded {\n                color: red;\n                border-color: red;\n                button {\n                    background-color: red;\n                    border-color: red;\n                }\n            }\n        }\n    }  \n\n    .user-profile_posts-wrapper {\n        display: grid;\n        grid-gap: 10px;\n        margin-bottom: auto;\n    }\n}\n</style>"],"sourceRoot":""}]}